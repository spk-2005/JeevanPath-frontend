/**
 * Test utilities for voice search functionality
 * This file contains test functions to verify all components work correctly
 */

import { translateText, detectLanguage } from './translationService';
import { parseQuery, generateSearchSuggestions, isEmergencyQuery } from './nlp';

// Test data for different languages
const testQueries = [
  { text: "Find nearby clinic", language: "en", expectedIntent: "clinic" },
  { text: "‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ‡•á‡§∏‡•Ä", language: "hi", expectedIntent: "pharmacy" },
  { text: "‡∞¶‡∞ó‡±ç‡∞ó‡∞∞‡±ç‡∞≤‡±ã ‡∞ï‡±ç‡∞≤‡∞ø‡∞®‡∞ø‡∞ï‡±ç", language: "te", expectedIntent: "clinic" },
  { text: "Emergency hospital", language: "en", expectedIntent: "clinic", isEmergency: true },
  { text: "‡§∞‡§ï‡•ç‡§§ ‡§¨‡•à‡§Ç‡§ï", language: "hi", expectedIntent: "blood" },
  { text: "Find medicine store", language: "en", expectedIntent: "pharmacy" }
];

/**
 * Test translation functionality
 */
export async function testTranslation() {
  console.log('üß™ Testing Translation Service...');
  
  try {
    // Test English to Hindi translation
    const result1 = await translateText("find clinic", "hi", "en");
    console.log('‚úÖ English to Hindi:', result1);
    
    // Test Hindi to English translation
    const result2 = await translateText("‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï", "en", "hi");
    console.log('‚úÖ Hindi to English:', result2);
    
    // Test language detection
    const detectedLang1 = detectLanguage("find clinic");
    const detectedLang2 = detectLanguage("‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï");
    console.log('‚úÖ Language detection - English:', detectedLang1);
    console.log('‚úÖ Language detection - Hindi:', detectedLang2);
    
    return true;
  } catch (error) {
    console.error('‚ùå Translation test failed:', error);
    return false;
  }
}

/**
 * Test NLP functionality
 */
export function testNLP() {
  console.log('üß™ Testing NLP Service...');
  
  try {
    testQueries.forEach((query, index) => {
      const parsed = parseQuery(query.text, query.language);
      const suggestions = generateSearchSuggestions(parsed.intent, query.language);
      const isEmergency = isEmergencyQuery(query.text, query.language);
      
      console.log(`‚úÖ Query ${index + 1}:`, {
        original: query.text,
        detectedIntent: parsed.intent.type,
        expectedIntent: query.expectedIntent,
        confidence: parsed.intent.confidence,
        isEmergency,
        suggestions: suggestions.slice(0, 2) // Show first 2 suggestions
      });
      
      // Verify intent detection
      if (parsed.intent.type !== query.expectedIntent) {
        console.warn(`‚ö†Ô∏è Intent mismatch for query ${index + 1}`);
      }
      
      // Verify emergency detection
      if (query.isEmergency && !isEmergency) {
        console.warn(`‚ö†Ô∏è Emergency not detected for query ${index + 1}`);
      }
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå NLP test failed:', error);
    return false;
  }
}

/**
 * Test complete voice search flow
 */
export async function testVoiceSearchFlow() {
  console.log('üß™ Testing Complete Voice Search Flow...');
  
  try {
    const testQuery = "Find nearby clinic";
    const detectedLang = detectLanguage(testQuery);
    const translatedQuery = await translateText(testQuery, 'en', detectedLang);
    const parsedQuery = parseQuery(testQuery, detectedLang);
    const suggestions = generateSearchSuggestions(parsedQuery.intent, detectedLang);
    const isEmergency = isEmergencyQuery(testQuery, detectedLang);
    
    console.log('‚úÖ Complete flow result:', {
      originalQuery: testQuery,
      detectedLanguage: detectedLang,
      translatedQuery,
      intent: parsedQuery.intent.type,
      confidence: parsedQuery.intent.confidence,
      isEmergency,
      suggestions: suggestions.slice(0, 3)
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Voice search flow test failed:', error);
    return false;
  }
}

/**
 * Test emergency detection
 */
export function testEmergencyDetection() {
  console.log('üß™ Testing Emergency Detection...');
  
  const emergencyQueries = [
    { text: "Emergency hospital", language: "en" },
    { text: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤", language: "hi" },
    { text: "‡∞Ö‡∞§‡±ç‡∞Ø‡∞µ‡∞∏‡∞∞‡∞Ç", language: "te" },
    { text: "Urgent clinic", language: "en" },
    { text: "‡§ú‡§∞‡•Ç‡§∞‡•Ä", language: "hi" }
  ];
  
  try {
    emergencyQueries.forEach((query, index) => {
      const isEmergency = isEmergencyQuery(query.text, query.language);
      console.log(`‚úÖ Emergency test ${index + 1}:`, {
        query: query.text,
        language: query.language,
        isEmergency
      });
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Emergency detection test failed:', error);
    return false;
  }
}

/**
 * Test multilingual support
 */
export function testMultilingualSupport() {
  console.log('üß™ Testing Multilingual Support...');
  
  const languages = ['en', 'hi', 'te', 'ta', 'kn', 'ml', 'bn', 'gu', 'mr', 'pa', 'ur'];
  
  try {
    languages.forEach(lang => {
      const testText = lang === 'en' ? 'clinic' : 
                     lang === 'hi' ? '‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï' :
                     lang === 'te' ? '‡∞ï‡±ç‡∞≤‡∞ø‡∞®‡∞ø‡∞ï‡±ç' :
                     lang === 'ta' ? '‡Æï‡Æø‡Æ≥‡Æø‡Æ©‡Æø‡Æï‡Øç' :
                     lang === 'kn' ? '‡≤ï‡≥ç‡≤≤‡≤ø‡≤®‡≤ø‡≤ï‡≥ç' :
                     lang === 'ml' ? '‡¥ï‡µç‡¥≤‡¥ø‡¥®‡¥ø‡¥ï‡µç' :
                     lang === 'bn' ? '‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶ø‡¶ï' :
                     lang === 'gu' ? '‡™ï‡´ç‡™≤‡™ø‡™®‡™ø‡™ï' :
                     lang === 'mr' ? '‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï' :
                     lang === 'pa' ? '‡®ï‡®≤‡©Ä‡®®‡®ø‡®ï' :
                     '⁄©ŸÑ€åŸÜ⁄©';
      
      const detectedLang = detectLanguage(testText);
      const parsed = parseQuery(testText, detectedLang);
      
      console.log(`‚úÖ Language ${lang}:`, {
        text: testText,
        detected: detectedLang,
        intent: parsed.intent.type,
        confidence: parsed.intent.confidence
      });
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå Multilingual support test failed:', error);
    return false;
  }
}

/**
 * Run all tests
 */
export async function runAllTests() {
  console.log('üöÄ Starting Voice Search Tests...\n');
  
  const results = {
    translation: await testTranslation(),
    nlp: testNLP(),
    voiceSearchFlow: await testVoiceSearchFlow(),
    emergencyDetection: testEmergencyDetection(),
    multilingualSupport: testMultilingualSupport()
  };
  
  console.log('\nüìä Test Results:');
  console.log('Translation Service:', results.translation ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('NLP Service:', results.nlp ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('Voice Search Flow:', results.voiceSearchFlow ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('Emergency Detection:', results.emergencyDetection ? '‚úÖ PASS' : '‚ùå FAIL');
  console.log('Multilingual Support:', results.multilingualSupport ? '‚úÖ PASS' : '‚ùå FAIL');
  
  const allPassed = Object.values(results).every(result => result);
  console.log('\nüéØ Overall Result:', allPassed ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED');
  
  return results;
}

/**
 * Quick test for development
 */
export function quickTest() {
  console.log('‚ö° Quick Test - Voice Search Components');
  
  // Test basic NLP
  const testQuery = "Find nearby pharmacy";
  const parsed = parseQuery(testQuery, 'en');
  const suggestions = generateSearchSuggestions(parsed.intent, 'en');
  
  console.log('‚úÖ Basic NLP Test:', {
    query: testQuery,
    intent: parsed.intent.type,
    confidence: parsed.intent.confidence,
    suggestions: suggestions.slice(0, 2)
  });
  
  // Test emergency detection
  const isEmergency = isEmergencyQuery("Emergency hospital", 'en');
  console.log('‚úÖ Emergency Detection:', isEmergency);
  
  // Test language detection
  const detectedLang = detectLanguage("‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï");
  console.log('‚úÖ Language Detection:', detectedLang);
  
  return true;
}
